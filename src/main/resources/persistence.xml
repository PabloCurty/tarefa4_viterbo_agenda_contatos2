<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
	<persistence-unit name="agendaContatos" transaction-type="JTA"> <!-- transaction-type="JTA" transaction-type="RESOURCE_LOCAL"-->
	
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		
		<!-- não sei se é aqui a jndi do database configurado no jboss satandalone.xml 
			ou na hibernate.connection.datasource--> 
		<jta-data-source>java:/MySqlDS</jta-data-source>
		
		<!-- mapeamento das entidades criadas -->
    	<class>model.Usuario</class>
    	<class>model.Contato</class>
    	<class>model.Agenda</class>
		
		<properties>
			<property name="hibernate.archive.autodetection" value="class"/>
			<!-- para visualizarmos as querys no console -->
			<property name="hibernate.show_sql" value="true"/>
			<!-- para formatamos as querys -->
			<property name="hibernate.formate_sql" value="true"/>

			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
			<property name="javax.persistence.jdbc.url"      value="jdbc:mysql://127.0.0.1:3306/agenda_contatos"/>
			
			<!-- usuario e senha definidos xml de configuração do servidor de aplicação -->
            <!--  <property name="javax.persistence.jdbc.user"     value="admin"/>	
            <property name="javax.persistence.jdbc.password" value="admin"/> -->
            
            <!-- não sei se é aqui a jndi do database configurado no jboss satandalone.xml ou na jta-data-source  
			<property name="hibernate.connection.datasource" value="java:/MySqlDS"/>	-->
            
        	<!-- metodo para criacao, atualizacao ou exclusao de tables-->
        	<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
        	<property name="hibernate.cache.use_second_level_cache" value="true" />
        	
        	<!-- “hibernate.hbm2ddl.auto” com essa opção ativada, o Hibernate atualizará suas tabelas 
        	quando necessário. Por exemplo, se a tabela não existir ela irá criar (“CREATE TABLE…”), 
        	se você adicionou uma coluna (“ALTER TABLE…”). Para testes vou deixar ativo, mas não aconselho 
        	a deixar essa opção ativada quando se trata de uma aplicação real. -->
        	<property name="hibernate.hbm2ddl.auto" value="update" />  
        	
        	<!-- 
        	
        		 Update -> faz as alterações no banco do tipo, criar novas colunas ou tabelas. 
        		 Também altera as propriedades das colunas. Isso acontece quando você modifica o mapeamento, 
        		 no caso as anotações. Se as tabelas ainda não existem no banco ele cria no primeiro acesso.

				 Create -> é arriscado usar porque ele exclui tudo e depois cria de novo. Então até para testes, 
				 você pode perder toda a sua base usando ele. Use no máximo na primeira vez que rodar o hibernate, 
				 depois modifique a configuração. 
				 
				 validate -> Em produção pode-se usar o "validate". O validate irá validar o 
				 schema do banco de dados com as entidades. Se algo estiver errado, uma exception será lançada 
				 de cara.
			
			-->
            
		
		
		</properties>
	
	</persistence-unit>
</persistence>
